name: Docker Build Benchmark

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  benchmark-optimized:
    name: "Benchmark: Optimized Dockerfile"
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build with Optimized Dockerfile (Cold Cache)
        id: build-cold
        run: |
          echo "🧊 Starting COLD build (no cache)..."
          START_TIME=$(date +%s)
          docker buildx build \
            --file Dockerfile \
            --tag nextjs-benchmark:optimized \
            --progress=plain \
            --no-cache \
            ./example 2>&1 | tee build-optimized-cold.log
          END_TIME=$(date +%s)
          BUILD_TIME=$((END_TIME - START_TIME))
          echo "build_time=${BUILD_TIME}" >> $GITHUB_OUTPUT
          echo "⏱️  Cold build completed in ${BUILD_TIME} seconds"

      - name: Make a small code change
        run: |
          echo "// Build timestamp: $(date)" >> example/app/page.tsx

      - name: Build with Optimized Dockerfile (Warm Cache)
        id: build-warm
        run: |
          echo "🔥 Starting WARM build (with cache)..."
          START_TIME=$(date +%s)
          docker buildx build \
            --file Dockerfile \
            --tag nextjs-benchmark:optimized-warm \
            --progress=plain \
            ./example 2>&1 | tee build-optimized-warm.log
          END_TIME=$(date +%s)
          BUILD_TIME=$((END_TIME - START_TIME))
          echo "build_time=${BUILD_TIME}" >> $GITHUB_OUTPUT
          echo "⏱️  Warm build completed in ${BUILD_TIME} seconds"

      - name: Summary
        run: |
          echo "## 🚀 Optimized Dockerfile Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Build Type | Time |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🧊 Cold Cache | ${{ steps.build-cold.outputs.build_time }}s |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔥 Warm Cache | ${{ steps.build-warm.outputs.build_time }}s |" >> $GITHUB_STEP_SUMMARY
          IMPROVEMENT=$(echo "scale=1; (1 - ${{ steps.build-warm.outputs.build_time }} / ${{ steps.build-cold.outputs.build_time }}) * 100" | bc)
          echo "| 💨 Improvement | ${IMPROVEMENT}% |" >> $GITHUB_STEP_SUMMARY

      - name: Upload build logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: optimized-build-logs
          path: |
            build-optimized-cold.log
            build-optimized-warm.log

  benchmark-default:
    name: "Benchmark: Default Dockerfile"
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build with Default Dockerfile (Cold Cache)
        id: build-cold
        run: |
          echo "🧊 Starting COLD build (no cache)..."
          START_TIME=$(date +%s)
          docker buildx build \
            --file Dockerfile.default \
            --tag nextjs-benchmark:default \
            --progress=plain \
            --no-cache \
            ./example 2>&1 | tee build-default-cold.log
          END_TIME=$(date +%s)
          BUILD_TIME=$((END_TIME - START_TIME))
          echo "build_time=${BUILD_TIME}" >> $GITHUB_OUTPUT
          echo "⏱️  Cold build completed in ${BUILD_TIME} seconds"

      - name: Make a small code change
        run: |
          echo "// Build timestamp: $(date)" >> example/app/page.tsx

      - name: Build with Default Dockerfile (Warm Cache)
        id: build-warm
        run: |
          echo "🔥 Starting WARM build (with cache)..."
          START_TIME=$(date +%s)
          docker buildx build \
            --file Dockerfile.default \
            --tag nextjs-benchmark:default-warm \
            --progress=plain \
            ./example 2>&1 | tee build-default-warm.log
          END_TIME=$(date +%s)
          BUILD_TIME=$((END_TIME - START_TIME))
          echo "build_time=${BUILD_TIME}" >> $GITHUB_OUTPUT
          echo "⏱️  Warm build completed in ${BUILD_TIME} seconds"

      - name: Summary
        run: |
          echo "## 📦 Default Dockerfile Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Build Type | Time |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🧊 Cold Cache | ${{ steps.build-cold.outputs.build_time }}s |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔥 Warm Cache | ${{ steps.build-warm.outputs.build_time }}s |" >> $GITHUB_STEP_SUMMARY
          IMPROVEMENT=$(echo "scale=1; (1 - ${{ steps.build-warm.outputs.build_time }} / ${{ steps.build-cold.outputs.build_time }}) * 100" | bc)
          echo "| 💨 Improvement | ${IMPROVEMENT}% |" >> $GITHUB_STEP_SUMMARY

      - name: Upload build logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: default-build-logs
          path: |
            build-default-cold.log
            build-default-warm.log

  compare-results:
    name: "Compare Results"
    runs-on: ubuntu-latest
    needs: [benchmark-optimized, benchmark-default]
    if: always()
    
    steps:
      - name: Create comparison summary
        run: |
          echo "# 📊 Docker Build Benchmark Comparison" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Benchmark completed! Check individual job summaries for detailed results." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Runner:** GitHub Actions (ubuntu-latest)" >> $GITHUB_STEP_SUMMARY
          echo "- **App:** Next.js 14 with 2001 pages" >> $GITHUB_STEP_SUMMARY
          echo "- **Pages:** 1 home + 2000 dynamic routes with 200-400ms artificial delay" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Dockerfiles Tested" >> $GITHUB_STEP_SUMMARY
          echo "1. **Optimized:** BuildKit cache mounts + Bun + multi-stage" >> $GITHUB_STEP_SUMMARY
          echo "2. **Default:** [Vercel's official example](https://github.com/vercel/next.js/blob/canary/examples/with-docker/Dockerfile)" >> $GITHUB_STEP_SUMMARY

